#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
The script ``visualize.py`` is used to visualize a search in 1D, 2D or 3D.

Outputs generated by the script are:
    - \*video.mp4
        a video of the search (.mp4), only for Unix-based systems with ffmpeg installed
    - \*video_xxxxxxxx.png
        video frames, only if requested or if unable to make a video

Each frame consists of two panels: one shows an observation map with the hits received since the start of the search,
the other shows the current probability distribution of source locations.

Parameters of the script are:
    - Source-tracking POMDP
        - R_BAR (float > 0.0)
            dimensionless source intensity

    - Policy
        - POLICY (int)
            - -2: alphavec (perseus or sarsop)
            - -1: neural network
            - 0: infotaxis (Vergassola, Villermaux and Shraiman, Nature 2007)
            - 1: space-aware infotaxis
            - 2: custom policy (to be implemented by the user)
            - 5: random walk
            - 6: greedy policy
            - 7: mean distance policy
            - 8: voting policy (Cassandra, Kaelbling & Kurien, IEEE 1996)
            - 9: most likely state policy (Cassandra, Kaelbling & Kurien, IEEE 1996)
        - STEPS_AHEAD (int >= 1)
            number of anticipated moves, can be > 1 only for POLICY=0
        - MODEL_PATH (str or None)
            path of the model (neural network) for POLICY=-1, None otherwise
        - ALPHAVEC_PATH (str or None)
            path of the perseus policy (alpha vectors) for POLICY=-2, None otherwise

    - Setup
        - DRAW_SOURCE (bool)
            if False, episodes will continue until the source is almost surely found (Bayesian setting)
        - ZERO_HIT (bool)
            whether to enforce a series of zero hits

    - Visualization
        - VISU_MODE (int={0,1,2})
            - 0: run without video
            - 1: make video in the background
            - 2: make video with live preview (slower)

            Note: with VISU_MODE = 2, the aspect ratio may be wrong depending on your screen size or resolution.
        - FRAME_RATE (int > 0)
            number of frames per second in the video
        - KEEP_FRAMES (bool)
            whether individual frames should be saved (otherwise frames are deleted, only the video is kept)

    - Stopping criteria
        - STOP_p (float ~ 0):
            stops when the probability that the source is found is greater than 1 - STOP_p (only if myenv.draw_source is False)
        - STOP_t (int > 0)
            maximum number of steps per episode

    - Saving
        - RUN_NAME (str or None)
            prefix used for all output files, if None will use a timestamp
"""
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import sys
sys.path.insert(1, os.path.abspath(os.path.join(sys.path[0], '..', '..')))
sys.path.insert(2, os.path.abspath(os.path.join(sys.path[0], '..', '..', 'zoo')))
import time
import argparse
import importlib
from windy.classes.sourcetracking import SourceTracking as env
from windy.classes.visualization import Visualization

# import default globals
from windy.visualize.parameters.__defaults import *

# import globals from user defined parameter file
if os.path.basename(sys.argv[0]) == "visualize.py":
    parser = argparse.ArgumentParser(description='Visualize an episode')
    parser.add_argument('-i', '--input',
                        dest='inputfile',
                        help='name of the file containing the parameters')
    args = vars(parser.parse_args())
    if args['inputfile'] is not None:
        filename, fileextension = os.path.splitext(args['inputfile'])
        params = importlib.import_module(name="parameters." + filename)
        names = [x for x in params.__dict__ if not x.startswith("_")]
        globals().update({k: getattr(params, k) for k in names})
        del params, names
    del parser, args

if MODEL_PATH is not None and POLICY != -1:
    raise Exception("Models (set by MODEL_PATH) can only be used with POLICY = -1 (neural network policy). "
                    "If you want to use the model, you must set POLICY = -1. "
                    "If you want a different policy, set MODEL_PATH = None.")

if ALPHAVEC_PATH is not None and POLICY != -2:
    raise Exception("Models (set by ALPHAVEC_PATH) can only be used with POLICY = -2 (Perseus/Sarsop policy). ")

if POLICY == -1:
    from windy.classes.rlpolicy import RLPolicy
    from windy.classes.valuemodel import reload_model
    if MODEL_PATH is None:
        raise Exception("MODEL_PATH cannot be None with a neural network policy!")
elif POLICY == -2:
    from windy.classes.alphavecpolicy import AlphaVecPolicy
    if ALPHAVEC_PATH is None:
        raise Exception("ALPHAVEC_PATH cannot be None with an alphavec (Perseus/Sarsop) policy!")
else:
    from windy.classes.heuristicpolicy import HeuristicPolicy

EPSILON = 1e-10

if RUN_NAME is None:
    RUN_NAME = time.strftime("%Y%m%d-%H%M%S")

DIR_OUTPUTS = os.path.abspath(os.path.join(sys.path[0], "outputs"))

# _______________________________________________


def run():
    """Main function to run and render an episode."""
    print("*** initializing env...")

    myenv = env(
        R_bar=R_BAR,
        draw_source=DRAW_SOURCE,
    )
    print("R_BAR = " + str(myenv.R_bar))
    print("V_BAR = " + str(myenv.V_bar))
    print("TAU_BAR = " + str(myenv.tau_bar))
    print("LAMBDA_BAR = " + str(myenv.lambda_bar))
    print("NORM_POISSON = " + myenv.norm_Poisson)
    print("GRID = " + str(myenv.shape))
    print("DRAW_SOURCE = " + str(myenv.draw_source))
    print("N_HITS = " + str(myenv.Nhits))

    if POLICY == -1:
        mymodel = reload_model(MODEL_PATH, inputshape=myenv.NN_input_shape)
        mypol = RLPolicy(
            env=myenv,
            model=mymodel,
        )
        print("POLICY = -1 (" + mypol.policy_name + ")")
        print("MODEL_PATH =", MODEL_PATH)
        print("MODEL_CONFIG =", mymodel.config)
    elif POLICY == -2:
        mypol = AlphaVecPolicy(
            env=myenv,
            filepath=ALPHAVEC_PATH,
            parallel=True,
        )
        print("POLICY = -2 (" + mypol.policy_long_name + ")")
        print("ALPHAVEC_PATH =", ALPHAVEC_PATH)
    else:
        mypol = HeuristicPolicy(
            env=myenv,
            policy=POLICY,
            steps_ahead=STEPS_AHEAD,
        )
        print("POLICY = " + str(mypol.policy_index) + " (" + mypol.policy_name + ")")
        print("STEPS_AHEAD = " + str(mypol.steps_ahead))

    print("*** running...")

    t = 0  # timestep
    T_mean = 0
    p_not_found_yet = 1   # proba the source has not been found yet
    stop = 0

    if VISU_MODE > 0:
        filename = os.path.join(DIR_OUTPUTS, str(RUN_NAME))
        myvisu = Visualization(
            myenv,
            live=VISU_MODE == 2,
            filename=filename
        )

    while True:

        if VISU_MODE > 0:
            if myenv.draw_source:
                toptext = "current policy: %s, current step: %d" % (mypol.policy_name, t)
            else:
                toptext = "current policy: %s, current step: %d, proba not found: %.3f %%" \
                          % (mypol.policy_name, t, p_not_found_yet * 100)
            myvisu.record_snapshot(num=t, toptext=toptext)

        # choice of action
        action = mypol.choose_action()

        # step in myenv
        forced_hit = None
        if ZERO_HIT:
            forced_hit = 0
        hit, p_end, done = myenv.step(action, hit=forced_hit, quiet=(POLICY == -1))

        t += 1
        T_mean += p_not_found_yet
        p_not_found_yet *= 1 - p_end

        print("nstep: %4d, action: %1d, hits: %3d, cum_hits: %6d, p_not_found_yet: %.8f"
              % (t, action, hit, myenv.cumulative_hits, p_not_found_yet))

        if done and myenv.draw_source:
            message = "success: source found"
            stop = 1
        elif p_not_found_yet < STOP_p or p_end > 1 - EPSILON:
            message = "success: source almost surely found " \
                      "(p_not_found_yet = " + str(round(p_not_found_yet, 8)) + ")"
            stop = 1
        elif t > STOP_t - 1:
            message = "failure: max number of iterations reached (nb it = " + str(t) + ")"
            stop = 2
        elif myenv.agent_stuck:
            message = "failure: agent is stuck"
            stop = 3

        if stop:
            break

    print(message)
    if not myenv.draw_source:
        print("mean number of steps for this episode = %.3f" % T_mean)

    if VISU_MODE > 0:
        if myenv.draw_source:
            toptext = "current policy: %s, current step: %d" % (mypol.policy_name, t)
        else:
            toptext = "current policy: %s, current step: %d, proba not found: %.3f %%" \
                      % (mypol.policy_name, t, p_not_found_yet * 100)

        myvisu.record_snapshot(num=t, toptext=toptext)
        exitcode = myvisu.make_video(frame_rate=FRAME_RATE, keep_frames=KEEP_FRAMES)
        if exitcode == 0:
            print(">>> Video saved in: " + str(filename) + "_video.mp4")
        else:
            print(">>> Frames have been saved in: " + str(filename) + "_frames")


if __name__ == "__main__":

    if not os.path.isdir(DIR_OUTPUTS):
        os.makedirs(DIR_OUTPUTS)

    start_time_0 = time.monotonic()
    run()
    if VISU_MODE == 0:
        print("CPU time (in seconds):", time.monotonic() - start_time_0)
